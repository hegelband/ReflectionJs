{"version":3,"file":"RelfectionJS-esm.js","mappings":"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","sources":["webpack://reflectionjs/./src/getArgumentDefaultValue.js","webpack://reflectionjs/./src/getBaseClassConstructor.js","webpack://reflectionjs/./src/getClassConstructorArgsNames.js","webpack://reflectionjs/./src/getFunctionArgsNames.js","webpack://reflectionjs/./src/getStringifiedEntityName.js","webpack://reflectionjs/./src/parseType.js","webpack://reflectionjs/webpack/bootstrap","webpack://reflectionjs/webpack/runtime/compat get default export","webpack://reflectionjs/webpack/runtime/define property getters","webpack://reflectionjs/webpack/runtime/hasOwnProperty shorthand","webpack://reflectionjs/./index-esm.js"],"sourcesContent":["const getStringifiedEntityName = require(\"./getStringifiedEntityName.js\");\nconst parseType = require(\"./parseType.js\");\n\nclass ArgumentInvalidType extends Error {\n\tconstructor(argType) {\n\t\tconst message = `Argument 'arg' of getArgumentDefaultValue(arg) has invalid type - ${argType}. Argument type must be a string.`;\n\t\tsuper(message);\n\t}\n}\n\nclass ArgumentIsEmptyString extends Error {\n\tconstructor() {\n\t\tsuper(`Argument 'arg' is an empty string.`);\n\t}\n}\n\n// What if argument default value is primitive or a stringified object (not JSON object, but object like a simple string) ???\nfunction getArgumentDefaultValue(argStr) {\n\tconst argType = parseType(argStr);\n\tif (argType !== \"string\") throw new ArgumentInvalidType(argType);\n\tif (argStr === \"\") throw new ArgumentIsEmptyString();\n\tconst parts = argStr.split(\"=\");\n\treturn {\n\t\tname: parts[0].trim(),\n\t\tvalue: parts.length > 1 ? getStringifiedEntityName(parts[1].trim()) : undefined,\n\t};\n}\n\nmodule.exports = getArgumentDefaultValue;\n","const parseType = require(\"./parseType.js\");\n\nclass ClassInvalidType extends Error {\n\tconstructor(argType) {\n\t\tconst message = `Argument 'cls' of getBaseClass(cls) has invalid type - ${argType}. Argument type must be a class or a function.`;\n\t\tsuper(message);\n\t}\n}\n\nconst getBaseClassConstructor = (cls) => {\n\tconst clsType = parseType(cls);\n\tif (clsType !== \"class\" && clsType !== \"function\") throw new ClassInvalidType(clsType);\n\tconst constructor = clsType === \"class\" ? cls.prototype.__proto__.constructor : cls.prototype;\n\treturn constructor;\n};\n\nmodule.exports = getBaseClassConstructor;\n","const { findCloseBraceIndex, splitArgsStrByCommas } = require(\"./getFunctionArgsNames.js\");\nconst parseType = require(\"./parseType.js\");\n\nclass HasNoConstructorError extends Error {\n\tconstructor() {\n\t\tconst message = \"DI object has no one constructor. Need one or more.\";\n\t\tsuper(message);\n\t}\n}\n\nclass ClsArgumentInvalidType extends Error {\n\tconstructor(clsType) {\n\t\tconst message = `Argument cls with invalid type - ${clsType}. Argument value type must be a class.`;\n\t\tsuper(message);\n\t}\n}\n\nconst getClassConstructorArgsNames = (cls) => {\n\tconst clsType = parseType(cls);\n\tif (clsType !== \"class\") throw new ClsArgumentInvalidType(clsType);\n\tconst clsStr = cls.toString();\n\tconst separator = \"constructor\";\n\tconst startIndex = clsStr.indexOf(separator, 0);\n\tif (startIndex === -1) {\n\t\tthrow new HasNoConstructorError();\n\t}\n\tconst openBraceStartIndex = clsStr.indexOf(\"(\", startIndex);\n\tlet closeBraceStartIndex = findCloseBraceIndex(clsStr, openBraceStartIndex);\n\tconst argsStr = clsStr.slice(openBraceStartIndex + 1, closeBraceStartIndex);\n\tconst argsSplittedArray = splitArgsStrByCommas(argsStr);\n\tconst args = argsSplittedArray.map((arg) => arg.trim()).filter((arg) => arg !== \"\");\n\treturn {\n\t\tstartPosition: startIndex,\n\t\targs,\n\t};\n};\n\nmodule.exports = getClassConstructorArgsNames;\n","const parseType = require(\"./parseType.js\");\n\nclass FuncArgumentInvalidType extends Error {\n\tconstructor(funcType) {\n\t\tconst message = `Argument func with invalid type - ${funcType}. Argument value type must be a function.`;\n\t\tsuper(message);\n\t}\n}\n\nconst findCloseBraceIndex = (str, startIndex) => {\n\tconst openBraceIndex = str.indexOf(\"(\", startIndex);\n\tlet closeBraceIndex = str.indexOf(\")\", openBraceIndex);\n\tconst getOpenBracesCount = (end) =>\n\t\tstr\n\t\t\t.split(\"\")\n\t\t\t.slice(openBraceIndex, end)\n\t\t\t.map((s, index) => ({ char: s, index }))\n\t\t\t.filter((s) => s.char === \"(\").length;\n\tlet openBraceBeforeCloseCount = getOpenBracesCount(closeBraceIndex);\n\tlet i = 0;\n\twhile (openBraceBeforeCloseCount > 1) {\n\t\ti++;\n\t\tcloseBraceIndex = str.indexOf(\")\", closeBraceIndex + 1);\n\t\topenBraceBeforeCloseCount = getOpenBracesCount(closeBraceIndex) - i;\n\t}\n\treturn closeBraceIndex;\n};\n\nconst findArgsSeparatorCommas = (str) => {\n\tconst allCommas = str\n\t\t.split(\"\")\n\t\t.map((char, index) => ({ char, index }))\n\t\t.filter((s) => s.char === \",\");\n\tlet prevCommaIndex = 0;\n\tconst argsSeparatorCommas = allCommas.filter((comma) => {\n\t\tconst openBracesCount = str\n\t\t\t.slice(prevCommaIndex, comma.index)\n\t\t\t.split(\"\")\n\t\t\t.filter((s) => s === \"(\").length;\n\t\tconst closeBracesCount = str\n\t\t\t.slice(prevCommaIndex, comma.index)\n\t\t\t.split(\"\")\n\t\t\t.filter((s) => s === \")\").length;\n\t\tconst openCurlyBracesCount = str\n\t\t\t.slice(prevCommaIndex, comma.index)\n\t\t\t.split(\"\")\n\t\t\t.filter((s) => s === \"{\").length;\n\t\tconst closeCurlyBracesCount = str\n\t\t\t.slice(prevCommaIndex, comma.index)\n\t\t\t.split(\"\")\n\t\t\t.filter((s) => s === \"}\").length;\n\t\tif (openBracesCount === closeBracesCount && openCurlyBracesCount === closeCurlyBracesCount) {\n\t\t\tprevCommaIndex = comma.index;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t});\n\treturn argsSeparatorCommas.map((c) => c.index);\n};\n\nconst splitArgsStrByCommas = (argsStr) => {\n\t// -1 is first, because next step will be slice with startIndex = separator[i] + 1\n\tconst separators = [-1, ...findArgsSeparatorCommas(argsStr), null];\n\treturn separators\n\t\t.slice(1)\n\t\t.map((commaIndex, i) => (commaIndex === null ? argsStr.slice(separators[i] + 1) : argsStr.slice(separators[i] + 1, commaIndex)));\n};\n\nconst getFunctionArgsNames = (func) => {\n\tconst funcType = parseType(func);\n\tif (funcType !== \"function\" && funcType !== \"function class\") throw new FuncArgumentInvalidType(funcType);\n\tconst funcStr = func.toString();\n\tconst openBraceIndex = funcStr.indexOf(\"(\", 0);\n\tconst closeBraceIndex = findCloseBraceIndex(funcStr, openBraceIndex);\n\tconst equalIndex = funcStr.indexOf(\"=\");\n\t// functions with one argument without braces around:\n\t// argName => {};\n\t// argName => doSth(argName);\n\tconst oneArgWithoutBraces = equalIndex !== -1 && (openBraceIndex === -1 || equalIndex < openBraceIndex);\n\tlet argsStr;\n\tif (oneArgWithoutBraces) {\n\t\targsStr = funcStr.slice(0, equalIndex);\n\t} else {\n\t\tif (openBraceIndex + 1 === closeBraceIndex)\n\t\t\targsStr = \"\"; // like function A() {}\n\t\telse argsStr = funcStr.slice(openBraceIndex + 1, closeBraceIndex);\n\t}\n\tconst argsSplittedArray = splitArgsStrByCommas(argsStr);\n\tconst args = argsSplittedArray.map((arg) => arg.trim()).filter((arg) => arg !== \"\");\n\treturn {\n\t\tstartPosition: openBraceIndex === -1 ? 0 : openBraceIndex,\n\t\targs,\n\t};\n};\n\nmodule.exports = getFunctionArgsNames;\nmodule.exports.findCloseBraceIndex = findCloseBraceIndex;\nmodule.exports.splitArgsStrByCommas = splitArgsStrByCommas;\n","const parseType = require(\"./parseType.js\");\n\nclass EntityStrInvalidType extends Error {\n\tconstructor(entityStr, entityStrType) {\n\t\tsuper(`getStringifiedEntityName argument type is invalid (${entityStr} - ${entityStrType}). 'entityStr' must be a string.`);\n\t}\n}\n\nclass EntityStrIsEmpty extends Error {\n\tconstructor() {\n\t\tsuper(`getStringifiedEntityName argument is an empty string.`);\n\t}\n}\n\nconst getStringifiedEntityName = (entityStr) => {\n\tconst entityStrType = parseType(entityStr);\n\tif (entityStrType !== \"string\") throw new EntityStrInvalidType(entityStr, entityStrType);\n\tif (entityStr === \"\") throw new EntityStrIsEmpty();\n\tif (entityStr.includes(\"WEBPACK_IMPORTED_MODULE\")) {\n\t\tconst startIndex = entityStr.indexOf(\"_\") + 1;\n\t\tconst endIndex = entityStr.indexOf(\"_\", startIndex + 1);\n\t\treturn entityStr.slice(startIndex, endIndex);\n\t}\n\treturn entityStr;\n};\n\nmodule.exports = getStringifiedEntityName;\n","function parseType(data) {\n\tconst type = typeof data;\n\tif (type !== \"function\") {\n\t\tif (type === \"object\" && data === null) return \"null\";\n\t\treturn type;\n\t}\n\tconst typeStr = data.toString();\n\tif (typeStr.startsWith(\"class\")) {\n\t\treturn \"class\";\n\t} else if (typeStr.includes(\"_classCallCheck\")) {\n\t\treturn \"function class\";\n\t} else {\n\t\treturn \"function\";\n\t}\n}\n\nmodule.exports = parseType;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import argDefaultValue from \"./src/getArgumentDefaultValue.js\";\nimport getBaseClassConstructor from \"./src/getBaseClassConstructor.js\";\nimport classConstructorArgsNames from \"./src/getClassConstructorArgsNames.js\";\nimport functionArgsNames from \"./src/getFunctionArgsNames.js\";\nimport getType from \"./src/parseType.js\";\n\nexport const getArgumentDefaultValue = argDefaultValue;\nexport const getClassConstructorArgsNames = classConstructorArgsNames;\nexport const getFunctionArgsNames = functionArgsNames;\nexport const parseType = getType;\nexport const getBaseClass = getBaseClassConstructor;\n"],"names":["getStringifiedEntityName","parseType","ArgumentInvalidType","Error","constructor","argType","super","ArgumentIsEmptyString","module","exports","argStr","parts","split","name","trim","value","length","undefined","ClassInvalidType","cls","clsType","prototype","__proto__","findCloseBraceIndex","splitArgsStrByCommas","HasNoConstructorError","ClsArgumentInvalidType","clsStr","toString","startIndex","indexOf","openBraceStartIndex","closeBraceStartIndex","argsStr","slice","startPosition","args","map","arg","filter","FuncArgumentInvalidType","funcType","str","openBraceIndex","closeBraceIndex","getOpenBracesCount","end","s","index","char","openBraceBeforeCloseCount","i","findArgsSeparatorCommas","allCommas","prevCommaIndex","comma","openBracesCount","closeBracesCount","openCurlyBracesCount","closeCurlyBracesCount","c","separators","commaIndex","func","funcStr","equalIndex","EntityStrInvalidType","entityStr","entityStrType","EntityStrIsEmpty","includes","endIndex","data","type","typeStr","startsWith","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","hasOwnProperty","call","getArgumentDefaultValue","getClassConstructorArgsNames","getFunctionArgsNames","getBaseClass"],"sourceRoot":""}